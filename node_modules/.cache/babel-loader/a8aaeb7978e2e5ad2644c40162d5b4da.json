{"ast":null,"code":"var _jsxFileName = \"/Users/kimnamgi/Desktop/swpp-redux-tutorial/src/containers/TodoList/TodoList.js\";\nimport React, { Component } from 'react';\nimport Todo from '../../components/Todo/Todo';\nimport TodoDetail from '../../components/TodoDetail/TodoDetail';\nimport './TodoList.css';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as actionTypes from '../../store/actions/actionTypes';\nimport { withRouter } from 'react-router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TodoList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      todos: [{\n        id: 1,\n        title: 'SWPP',\n        content: 'take swpp class',\n        done: true\n      }, {\n        id: 2,\n        title: 'Movie',\n        content: 'watch movie',\n        done: false\n      }, {\n        id: 3,\n        title: 'Dinner',\n        content: 'eat dinner',\n        done: false\n      }],\n      selectedTodo: null\n    };\n\n    this.clickTodoHandler = td => {\n      this.props.history.push('/todos/ + td.id'); // if (this.state.selectedTodo === td) {\n      //   this.setState({ ...this.state, selectedTodo: null });\n      // } else {\n      //   this.setState({ ...this.state, selectedTodo: td });\n      // }\n    };\n  }\n\n  render() {\n    const todos = this.state.todos.map(td => {\n      return /*#__PURE__*/_jsxDEV(Todo, {\n        title: td.title,\n        done: td.done,\n        clicked: () => this.clickTodoHandler(td),\n        clickDetail: () => this.clickTodoHandler(td),\n        clickDone: () => this.props.onToggleTodo(td.id),\n        clickDelete: () => this.props.onDeleteTodo(td.id)\n      }, td.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this);\n    });\n    let todo = null;\n\n    if (this.state.selectedTodo) {\n      todo = /*#__PURE__*/_jsxDEV(TodoDetail, {\n        title: this.state.selectedTodo.title,\n        content: this.state.selectedTodo.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"TodoList\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: this.props.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todos\",\n        children: todos\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), todo, /*#__PURE__*/_jsxDEV(NavLink, {\n        to: \"/new-todo\",\n        exact: true,\n        children: \"New Todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    storedTodos: state.td.todos\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onToggleTodo: id => dispatch({\n      type: actionTypes.TOGGLE_DONE,\n      targetID: id\n    }),\n    onDeleteTodo: id => dispatch({\n      type: actionTypes.DELETE_TODO,\n      targetID: id\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(TodoList));","map":{"version":3,"sources":["/Users/kimnamgi/Desktop/swpp-redux-tutorial/src/containers/TodoList/TodoList.js"],"names":["React","Component","Todo","TodoDetail","NavLink","connect","actionTypes","withRouter","TodoList","state","todos","id","title","content","done","selectedTodo","clickTodoHandler","td","props","history","push","render","map","onToggleTodo","onDeleteTodo","todo","mapStateToProps","storedTodos","mapDispatchToProps","dispatch","type","TOGGLE_DONE","targetID","DELETE_TODO"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Todo from '../../components/Todo/Todo';\nimport TodoDetail from '../../components/TodoDetail/TodoDetail';\nimport './TodoList.css';\n\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport * as actionTypes from '../../store/actions/actionTypes';\nimport { withRouter } from 'react-router';\n\nclass TodoList extends Component {\n  state = {\n    todos: [\n      { id: 1, title: 'SWPP', content: 'take swpp class', done: true },\n      { id: 2, title: 'Movie', content: 'watch movie', done: false },\n      { id: 3, title: 'Dinner', content: 'eat dinner', done: false }\n    ],\n    selectedTodo: null,\n  }\n\n  clickTodoHandler = (td) => {\n    this.props.history.push('/todos/ + td.id');\n    // if (this.state.selectedTodo === td) {\n    //   this.setState({ ...this.state, selectedTodo: null });\n    // } else {\n    //   this.setState({ ...this.state, selectedTodo: td });\n    // }\n  }\n\n  render() {\n    const todos = this.state.todos.map((td) => {\n      return (\n        <Todo\n          key={td.id}\n          title={td.title}\n          done={td.done}\n          clicked={() => this.clickTodoHandler(td)}\n          clickDetail={() => this.clickTodoHandler(td)}\n          clickDone={() => this.props.onToggleTodo(td.id)}\n          clickDelete={() => this.props.onDeleteTodo(td.id)}\n        />);\n    });\n\n    let todo = null;\n    if (this.state.selectedTodo) {\n      todo = <TodoDetail\n        title={this.state.selectedTodo.title}\n        content={this.state.selectedTodo.content}\n      />\n    }\n    return (\n      <div className=\"TodoList\">\n        <div className=\"title\">{this.props.title}</div>\n        <div className=\"todos\">{todos}</div>\n        {todo}\n        <NavLink to='/new-todo' exact>New Todo</NavLink>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    storedTodos: state.td.todos\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onToggleTodo: (id) => dispatch({type: actionTypes.TOGGLE_DONE, targetID: id}),\n    onDeleteTodo: (id) => dispatch({type: actionTypes.DELETE_TODO, targetID: id}),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(TodoList));"]},"metadata":{},"sourceType":"module"}