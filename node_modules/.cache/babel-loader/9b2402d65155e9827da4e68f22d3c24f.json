{"ast":null,"code":"import * as actionTypes from \"../actions/actionTypes\";\nconst initialState = {\n  todos: [{\n    id: 1,\n    title: \"SWPP\",\n    content: \"take swpp class\",\n    done: true\n  }, {\n    id: 2,\n    title: \"Movie\",\n    content: \"watch movie\",\n    done: false\n  }, {\n    id: 3,\n    title: \"Dinner\",\n    content: \"eat dinner\",\n    done: false\n  }],\n  selectedTodo: null\n};\n\nconst todoReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_TODO:\n      const newTodo = {\n        id: action.id,\n        title: action.title,\n        content: action.content,\n        done: action.done\n      };\n      return { ...state,\n        todos: [...state.todos, newTodo]\n      };\n\n    case actionTypes.DELETE_TODO:\n      const deleted = state.todos.filter(todo => {\n        return todo.id !== action.targetID;\n      });\n      return { ...state,\n        todos: deleted\n      };\n\n    case actionTypes.TOGGLE_DONE:\n      const modified = state.todos.map(todo => {\n        if (todo.id === action.targetID) {\n          return { ...todo,\n            done: !todo.done\n          };\n        } else {\n          return { ...todo\n          };\n        }\n      });\n      return { ...state,\n        todos: modified\n      };\n\n    case actionTypes.GET_TODO:\n      const target = state.todos.find(td => td.id === action.targetID);\n      return { ...state,\n        selectedTodo: target\n      };\n\n    case actionTypes.GET_ALL:\n      return { ...state,\n        todos: action.todos\n      };\n\n    default:\n      break;\n  }\n\n  return state;\n};\n\nexport default todoReducer;","map":{"version":3,"sources":["/Users/kangwhihyun/Documents/Dev/SWPP/swpp-redux-tutorial/src/store/reducers/todo.js"],"names":["actionTypes","initialState","todos","id","title","content","done","selectedTodo","todoReducer","state","action","type","ADD_TODO","newTodo","DELETE_TODO","deleted","filter","todo","targetID","TOGGLE_DONE","modified","map","GET_TODO","target","find","td","GET_ALL"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CACL;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,MAAhB;AAAwBC,IAAAA,OAAO,EAAE,iBAAjC;AAAoDC,IAAAA,IAAI,EAAE;AAA1D,GADK,EAEL;AAAEH,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,OAAhB;AAAyBC,IAAAA,OAAO,EAAE,aAAlC;AAAiDC,IAAAA,IAAI,EAAE;AAAvD,GAFK,EAGL;AAAEH,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,QAAhB;AAA0BC,IAAAA,OAAO,EAAE,YAAnC;AAAiDC,IAAAA,IAAI,EAAE;AAAvD,GAHK,CADY;AAMnBC,EAAAA,YAAY,EAAE;AANK,CAArB;;AASA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,WAAW,CAACY,QAAjB;AACE,YAAMC,OAAO,GAAG;AACdV,QAAAA,EAAE,EAAEO,MAAM,CAACP,EADG;AAEdC,QAAAA,KAAK,EAAEM,MAAM,CAACN,KAFA;AAGdC,QAAAA,OAAO,EAAEK,MAAM,CAACL,OAHF;AAIdC,QAAAA,IAAI,EAAEI,MAAM,CAACJ;AAJC,OAAhB;AAMA,aAAO,EAAE,GAAGG,KAAL;AAAYP,QAAAA,KAAK,EAAE,CAAC,GAAGO,KAAK,CAACP,KAAV,EAAiBW,OAAjB;AAAnB,OAAP;;AAEF,SAAKb,WAAW,CAACc,WAAjB;AACE,YAAMC,OAAO,GAAGN,KAAK,CAACP,KAAN,CAAYc,MAAZ,CAAoBC,IAAD,IAAU;AAC3C,eAAOA,IAAI,CAACd,EAAL,KAAYO,MAAM,CAACQ,QAA1B;AACD,OAFe,CAAhB;AAGA,aAAO,EAAE,GAAGT,KAAL;AAAYP,QAAAA,KAAK,EAAEa;AAAnB,OAAP;;AAEF,SAAKf,WAAW,CAACmB,WAAjB;AACE,YAAMC,QAAQ,GAAGX,KAAK,CAACP,KAAN,CAAYmB,GAAZ,CAAiBJ,IAAD,IAAU;AACzC,YAAIA,IAAI,CAACd,EAAL,KAAYO,MAAM,CAACQ,QAAvB,EAAiC;AAC/B,iBAAO,EAAE,GAAGD,IAAL;AAAWX,YAAAA,IAAI,EAAE,CAACW,IAAI,CAACX;AAAvB,WAAP;AACD,SAFD,MAEO;AACL,iBAAO,EAAE,GAAGW;AAAL,WAAP;AACD;AACF,OANgB,CAAjB;AAOA,aAAO,EAAE,GAAGR,KAAL;AAAYP,QAAAA,KAAK,EAAEkB;AAAnB,OAAP;;AAEF,SAAKpB,WAAW,CAACsB,QAAjB;AACE,YAAMC,MAAM,GAAGd,KAAK,CAACP,KAAN,CAAYsB,IAAZ,CAAkBC,EAAD,IAAQA,EAAE,CAACtB,EAAH,KAAUO,MAAM,CAACQ,QAA1C,CAAf;AACA,aAAO,EAAE,GAAGT,KAAL;AAAYF,QAAAA,YAAY,EAAEgB;AAA1B,OAAP;;AAEF,SAAKvB,WAAW,CAAC0B,OAAjB;AACE,aAAO,EAAE,GAAGjB,KAAL;AAAYP,QAAAA,KAAK,EAAEQ,MAAM,CAACR;AAA1B,OAAP;;AAEF;AACE;AAlCJ;;AAoCA,SAAOO,KAAP;AACD,CAtCD;;AAwCA,eAAeD,WAAf","sourcesContent":["import * as actionTypes from \"../actions/actionTypes\";\n\nconst initialState = {\n  todos: [\n    { id: 1, title: \"SWPP\", content: \"take swpp class\", done: true },\n    { id: 2, title: \"Movie\", content: \"watch movie\", done: false },\n    { id: 3, title: \"Dinner\", content: \"eat dinner\", done: false },\n  ],\n  selectedTodo: null,\n};\n\nconst todoReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_TODO:\n      const newTodo = {\n        id: action.id,\n        title: action.title,\n        content: action.content,\n        done: action.done,\n      };\n      return { ...state, todos: [...state.todos, newTodo] };\n\n    case actionTypes.DELETE_TODO:\n      const deleted = state.todos.filter((todo) => {\n        return todo.id !== action.targetID;\n      });\n      return { ...state, todos: deleted };\n\n    case actionTypes.TOGGLE_DONE:\n      const modified = state.todos.map((todo) => {\n        if (todo.id === action.targetID) {\n          return { ...todo, done: !todo.done };\n        } else {\n          return { ...todo };\n        }\n      });\n      return { ...state, todos: modified };\n\n    case actionTypes.GET_TODO:\n      const target = state.todos.find((td) => td.id === action.targetID);\n      return { ...state, selectedTodo: target };\n\n    case actionTypes.GET_ALL:\n      return { ...state, todos: action.todos };\n\n    default:\n      break;\n  }\n  return state;\n};\n\nexport default todoReducer;\n"]},"metadata":{},"sourceType":"module"}