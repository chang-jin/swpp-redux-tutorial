{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nconst initialState = {\n  todos: [{\n    id: 1,\n    title: 'SWPP',\n    content: 'take swpp class',\n    done: true\n  }, {\n    id: 2,\n    title: 'Movie',\n    content: 'watch movie',\n    done: false\n  }, {\n    id: 3,\n    title: 'Dinner',\n    content: 'eat dinner',\n    done: false\n  }],\n  selectedTodo: null\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_TODO:\n      const newTodo = {\n        id: action.id,\n        title: action.title,\n        content: action.content,\n        done: action.done\n      };\n      return { ...state,\n        todos: [...state.todos, newTodo]\n      };\n\n    case actionTypes.DELETE_TODO:\n      const deleted = state.todos.filter(todo => {\n        return todo.id !== action.targetID;\n      });\n      return { ...state,\n        todos: deleted\n      };\n\n    case actionTypes.TOGGLE_DONE:\n      const modified = state.todos.map(todo => {\n        if (todo.id === action.targetID) {\n          return { ...todo,\n            done: !todo.done\n          };\n        } else {\n          return { ...todo\n          };\n        }\n      });\n      return { ...state,\n        todos: modified\n      };\n\n    case actionTypes.GET_TODO:\n      const target = state.todos.find(td => td.id === action.targetID);\n      return { ...state,\n        selectedTodo: action.target\n      };\n\n    case actionTypes.GET_ALL:\n      return { ...state,\n        todos: action.todos\n      };\n\n    default:\n      break;\n  }\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/kimnamgi/Desktop/swpp-redux-tutorial/src/store/reducers/todo.js"],"names":["actionTypes","initialState","todos","id","title","content","done","selectedTodo","reducer","state","action","type","ADD_TODO","newTodo","DELETE_TODO","deleted","filter","todo","targetID","TOGGLE_DONE","modified","map","GET_TODO","target","find","td","GET_ALL"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,CACL;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,MAAhB;AAAwBC,IAAAA,OAAO,EAAE,iBAAjC;AAAoDC,IAAAA,IAAI,EAAE;AAA1D,GADK,EAEL;AAAEH,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,OAAhB;AAAyBC,IAAAA,OAAO,EAAE,aAAlC;AAAiDC,IAAAA,IAAI,EAAE;AAAvD,GAFK,EAGL;AAAEH,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,QAAhB;AAA0BC,IAAAA,OAAO,EAAE,YAAnC;AAAiDC,IAAAA,IAAI,EAAE;AAAvD,GAHK,CADU;AAMjBC,EAAAA,YAAY,EAAE;AANG,CAArB;;AAQA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKX,WAAW,CAACY,QAAjB;AACI,YAAMC,OAAO,GAAG;AACZV,QAAAA,EAAE,EAAEO,MAAM,CAACP,EADC;AAEZC,QAAAA,KAAK,EAAEM,MAAM,CAACN,KAFF;AAGZC,QAAAA,OAAO,EAAEK,MAAM,CAACL,OAHJ;AAIZC,QAAAA,IAAI,EAAEI,MAAM,CAACJ;AAJD,OAAhB;AAMA,aAAO,EAAC,GAAGG,KAAJ;AAAWP,QAAAA,KAAK,EAAE,CAAC,GAAGO,KAAK,CAACP,KAAV,EAAiBW,OAAjB;AAAlB,OAAP;;AACJ,SAAKb,WAAW,CAACc,WAAjB;AACI,YAAMC,OAAO,GAAGN,KAAK,CAACP,KAAN,CAAYc,MAAZ,CAAoBC,IAAD,IAAU;AACzC,eAAOA,IAAI,CAACd,EAAL,KAAYO,MAAM,CAACQ,QAA1B;AACH,OAFe,CAAhB;AAGA,aAAO,EAAE,GAAGT,KAAL;AAAYP,QAAAA,KAAK,EAACa;AAAlB,OAAP;;AACJ,SAAKf,WAAW,CAACmB,WAAjB;AACI,YAAMC,QAAQ,GAAGX,KAAK,CAACP,KAAN,CAAYmB,GAAZ,CAAiBJ,IAAD,IAAU;AACvC,YAAIA,IAAI,CAACd,EAAL,KAAYO,MAAM,CAACQ,QAAvB,EAAiC;AAC7B,iBAAO,EAAE,GAAGD,IAAL;AAAWX,YAAAA,IAAI,EAAE,CAACW,IAAI,CAACX;AAAvB,WAAP;AACH,SAFD,MAEO;AACH,iBAAO,EAAE,GAAGW;AAAL,WAAP;AACH;AACJ,OANgB,CAAjB;AAOA,aAAO,EAAE,GAAGR,KAAL;AAAYP,QAAAA,KAAK,EAAEkB;AAAnB,OAAP;;AACJ,SAAKpB,WAAW,CAACsB,QAAjB;AACI,YAAMC,MAAM,GAAGd,KAAK,CAACP,KAAN,CAAYsB,IAAZ,CAAiBC,EAAE,IAAIA,EAAE,CAACtB,EAAH,KAAUO,MAAM,CAACQ,QAAxC,CAAf;AACA,aAAO,EAAE,GAAGT,KAAL;AAAYF,QAAAA,YAAY,EAAEG,MAAM,CAACa;AAAjC,OAAP;;AACJ,SAAKvB,WAAW,CAAC0B,OAAjB;AACI,aAAO,EAAE,GAAGjB,KAAL;AAAYP,QAAAA,KAAK,EAAEQ,MAAM,CAACR;AAA1B,OAAP;;AACJ;AACI;AA7BR;;AA+BA,SAAOO,KAAP;AACH,CAjCD;;AAmCA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes'\n\nconst initialState = {\n    todos: [\n      { id: 1, title: 'SWPP', content: 'take swpp class', done: true },\n      { id: 2, title: 'Movie', content: 'watch movie', done: false },\n      { id: 3, title: 'Dinner', content: 'eat dinner', done: false }\n    ],\n    selectedTodo: null\n};\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_TODO:\n            const newTodo = {\n                id: action.id,\n                title: action.title,\n                content: action.content,\n                done: action.done,\n            }\n            return {...state, todos: [...state.todos, newTodo]};\n        case actionTypes.DELETE_TODO:\n            const deleted = state.todos.filter((todo) => {\n                return todo.id !== action.targetID;\n            });\n            return { ...state, todos:deleted };\n        case actionTypes.TOGGLE_DONE:\n            const modified = state.todos.map((todo) => {\n                if (todo.id === action.targetID) {\n                    return { ...todo, done: !todo.done };\n                } else {\n                    return { ...todo };\n                }\n            });\n            return { ...state, todos: modified };\n        case actionTypes.GET_TODO:\n            const target = state.todos.find(td => td.id === action.targetID);\n            return { ...state, selectedTodo: action.target };\n        case actionTypes.GET_ALL:\n            return { ...state, todos: action.todos };\n        default:\n            break;\n    }\n    return state;\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}