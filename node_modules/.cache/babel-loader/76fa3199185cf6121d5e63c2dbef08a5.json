{"ast":null,"code":"var _jsxFileName = \"/Users/ellenkim/Projects/swpp-redux-tutorial/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\nimport todoReducer from './store/reducers/todo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst history = createBrowserHistory();\nconst rootReducer = combineReducers({\n  td: todoReducer,\n  router: connectRouter(history)\n});\n\nconst logger = store => {\n  return next => {\n    return action => {\n      console.log('[Middleware] Dispatching', action);\n      const result = next(action);\n      console.log('[Middleware] Next State', store.getState());\n      return result;\n    };\n  };\n};\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\nReactDOM.render( /*#__PURE__*/_jsxDEV(Provider, {\n  store: store,\n  children: /*#__PURE__*/_jsxDEV(App, {\n    history: history\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 37,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/ellenkim/Projects/swpp-redux-tutorial/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","Provider","createStore","combineReducers","applyMiddleware","compose","thunk","connectRouter","routerMiddleware","createBrowserHistory","todoReducer","history","rootReducer","td","router","logger","store","next","action","console","log","result","getState","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AAEA,SAASC,QAAT,QAAyB,aAAzB;AAEA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,EAAwDC,OAAxD,QAAuE,OAAvE;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,wBAAhD;AACA,SAASC,oBAAT,QAAqC,SAArC;AAEA,OAAOC,WAAP,MAAwB,uBAAxB;;AAEA,MAAMC,OAAO,GAAGF,oBAAoB,EAApC;AACA,MAAMG,WAAW,GAAGT,eAAe,CAAC;AAClCU,EAAAA,EAAE,EAAEH,WAD8B;AAElCI,EAAAA,MAAM,EAAEP,aAAa,CAACI,OAAD;AAFa,CAAD,CAAnC;;AAKA,MAAMI,MAAM,GAAGC,KAAK,IAAI;AACtB,SAAOC,IAAI,IAAI;AACb,WAAOC,MAAM,IAAI;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCF,MAAxC;AACA,YAAMG,MAAM,GAAGJ,IAAI,CAACC,MAAD,CAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCJ,KAAK,CAACM,QAAN,EAAvC;AACA,aAAOD,MAAP;AACD,KALD;AAMD,GAPD;AAQD,CATD;;AAWA,MAAML,KAAK,GAAGd,WAAW,CAACU,WAAD,EAAcR,eAAe,CAACE,KAAD,CAA7B,CAAzB;AAEAR,QAAQ,CAACyB,MAAT,eACE,QAAC,QAAD;AAAU,EAAA,KAAK,EAAEP,KAAjB;AAAA,yBACE,QAAC,GAAD;AAAK,IAAA,OAAO,EAAEL;AAAd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIEa,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,E,CAMA;AACA;AACA;;AACAzB,aAAa,CAAC0B,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\n\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\n\nimport todoReducer from './store/reducers/todo';\n\nconst history = createBrowserHistory();\nconst rootReducer = combineReducers({\n  td: todoReducer,\n  router: connectRouter(history),\n});\n\nconst logger = store => {\n  return next => {\n    return action => {\n      console.log('[Middleware] Dispatching', action);\n      const result = next(action);\n      console.log('[Middleware] Next State', store.getState());\n      return result;\n    };\n  };\n};\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App history={history} />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"]},"metadata":{},"sourceType":"module"}