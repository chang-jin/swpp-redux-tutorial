{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nconst initialState = {\n  todos: [{\n    id: 1,\n    title: 'SWPP',\n    content: 'take swpp class',\n    done: true\n  }, {\n    id: 2,\n    title: 'Movie',\n    content: 'watch movie',\n    done: false\n  }, {\n    id: 3,\n    title: 'Dinner',\n    content: 'eat dinner',\n    done: false\n  }],\n  selectedTodo: null\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    // we will handle actions via switch statement\n    case actionTypes.ADD_TODO:\n      // as React, do not mutate state directly, make new object\n      const newTodo = {\n        id: action.id,\n        // temporary\n        title: action.title,\n        content: action.content,\n        done: action.done\n      };\n      return { ...state,\n        todos: [...state.todos, newTodo]\n      };\n\n    case actionTypes.DELETE_TODO:\n      const deleted = state.todos.filter(value => {\n        return value.id !== action.targetID;\n      });\n      return { ...state,\n        todos: deleted\n      };\n\n    case actionTypes.TOGGLE_DONE:\n      const modified = state.todos.map(value => {\n        if (value.id === action.targetID) {\n          return { ...value,\n            done: !value.done\n          };\n        } else return { ...value\n        };\n      });\n      return { ...state,\n        todos: modified\n      };\n\n    case actionTypes.GET_TODO:\n      return { ...state,\n        selectedTodo: action.target\n      };\n\n    case actionTypes.GET_ALL:\n      return { ...state,\n        todos: action.todos\n      };\n\n    default:\n      break;\n  }\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/queis/SWPP_Projects/week-4-practice/src/store/reducers/todo.js"],"names":["actionTypes","initialState","todos","id","title","content","done","selectedTodo","reducer","state","action","type","ADD_TODO","newTodo","DELETE_TODO","deleted","filter","value","targetID","TOGGLE_DONE","modified","map","GET_TODO","target","GET_ALL"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,CACH;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,MAAhB;AAAwBC,IAAAA,OAAO,EAAE,iBAAjC;AAAoDC,IAAAA,IAAI,EAAE;AAA1D,GADG,EAEH;AAAEH,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,OAAhB;AAAyBC,IAAAA,OAAO,EAAE,aAAlC;AAAiDC,IAAAA,IAAI,EAAE;AAAvD,GAFG,EAGH;AAAEH,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,QAAhB;AAA0BC,IAAAA,OAAO,EAAE,YAAnC;AAAiDC,IAAAA,IAAI,EAAE;AAAvD,GAHG,CADU;AAKdC,EAAAA,YAAY,EAAE;AALA,CAArB;;AAQA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI;AACA,SAAKX,WAAW,CAACY,QAAjB;AACI;AACA,YAAMC,OAAO,GAAG;AACZV,QAAAA,EAAE,EAAEO,MAAM,CAACP,EADC;AACG;AACfC,QAAAA,KAAK,EAAEM,MAAM,CAACN,KAFF;AAESC,QAAAA,OAAO,EAAEK,MAAM,CAACL,OAFzB;AAEkCC,QAAAA,IAAI,EAACI,MAAM,CAACJ;AAF9C,OAAhB;AAIA,aAAO,EAAC,GAAGG,KAAJ;AAAWP,QAAAA,KAAK,EAAE,CAAC,GAAGO,KAAK,CAACP,KAAV,EAAiBW,OAAjB;AAAlB,OAAP;;AAEJ,SAAKb,WAAW,CAACc,WAAjB;AACI,YAAMC,OAAO,GAAGN,KAAK,CAACP,KAAN,CAAYc,MAAZ,CAAmBC,KAAK,IAAI;AACxC,eAAOA,KAAK,CAACd,EAAN,KAAaO,MAAM,CAACQ,QAA3B;AACH,OAFe,CAAhB;AAGA,aAAO,EAAC,GAAGT,KAAJ;AAAWP,QAAAA,KAAK,EAAEa;AAAlB,OAAP;;AAEJ,SAAKf,WAAW,CAACmB,WAAjB;AACI,YAAMC,QAAQ,GAAGX,KAAK,CAACP,KAAN,CAAYmB,GAAZ,CAAgBJ,KAAK,IAAI;AACtC,YAAIA,KAAK,CAACd,EAAN,KAAaO,MAAM,CAACQ,QAAxB,EAAkC;AAC9B,iBAAO,EAAC,GAAGD,KAAJ;AAAWX,YAAAA,IAAI,EAAE,CAACW,KAAK,CAACX;AAAxB,WAAP;AACH,SAFD,MAGK,OAAO,EAAC,GAAGW;AAAJ,SAAP;AACR,OALgB,CAAjB;AAMA,aAAO,EAAC,GAAGR,KAAJ;AAAWP,QAAAA,KAAK,EAAEkB;AAAlB,OAAP;;AAEJ,SAAKpB,WAAW,CAACsB,QAAjB;AACI,aAAO,EAAC,GAAGb,KAAJ;AAAWF,QAAAA,YAAY,EAAEG,MAAM,CAACa;AAAhC,OAAP;;AAEJ,SAAKvB,WAAW,CAACwB,OAAjB;AACI,aAAO,EAAC,GAAGf,KAAJ;AAAWP,QAAAA,KAAK,EAAEQ,MAAM,CAACR;AAAzB,OAAP;;AAEJ;AACI;AAhCR;;AAkCA,SAAOO,KAAP;AACH,CApCD;;AAsCA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    todos: [\r\n        { id: 1, title: 'SWPP', content: 'take swpp class', done: true },\r\n        { id: 2, title: 'Movie', content: 'watch movie', done: false },\r\n        { id: 3, title: 'Dinner', content: 'eat dinner', done: false }\r\n    ], selectedTodo: null\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        // we will handle actions via switch statement\r\n        case actionTypes.ADD_TODO:\r\n            // as React, do not mutate state directly, make new object\r\n            const newTodo = {\r\n                id: action.id, // temporary\r\n                title: action.title, content: action.content, done:action.done\r\n            }\r\n            return {...state, todos: [...state.todos, newTodo]};\r\n\r\n        case actionTypes.DELETE_TODO:\r\n            const deleted = state.todos.filter(value => {\r\n                return value.id !== action.targetID;\r\n            })\r\n            return {...state, todos: deleted}\r\n\r\n        case actionTypes.TOGGLE_DONE:\r\n            const modified = state.todos.map(value => {\r\n                if (value.id === action.targetID) {\r\n                    return {...value, done: !value.done};\r\n                }\r\n                else return {...value};\r\n            })\r\n            return {...state, todos: modified};\r\n\r\n        case actionTypes.GET_TODO:\r\n            return {...state, selectedTodo: action.target };\r\n\r\n        case actionTypes.GET_ALL:\r\n            return {...state, todos: action.todos };\r\n\r\n        default:\r\n            break;\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}